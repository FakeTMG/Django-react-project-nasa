{"ast":null,"code":"import axios from \"axios\"; //request interceptor to add the auth token header to requests\n\naxios.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem(\"accessToken\");\n\n  if (accessToken) {\n    config.headers[\"x-auth-token\"] = accessToken;\n  }\n\n  return config;\n}, error => {\n  Promise.reject(error);\n}); //response interceptor to refresh token on receiving token expired error\n\naxios.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  const originalRequest = error.config;\n  let refreshToken = localStorage.getItem(\"refreshToken\");\n\n  if (refreshToken && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return axios.post(`auth/token/refresh/`, {\n      refreshToken: refreshToken\n    }).then(res => {\n      if (res.status === 200) {\n        localStorage.setItem(\"accessToken\", res.data.accessToken);\n        console.log(\"Access token refreshed!\");\n        return axios(originalRequest);\n      }\n    });\n  }\n\n  return Promise.reject(error);\n}); //functions to make api calls\n\nconst api = {\n  signup: body => {\n    return axios.post(`auth/register/`, body);\n  },\n  login: body => {\n    return axios.post(`auth/login/`, body);\n  },\n  refreshToken: body => {\n    return axios.post(`auth/token/refresh/`, body);\n  },\n  logout: body => {\n    return axios.delete(`auth/logout/`, body);\n  }\n};","map":{"version":3,"sources":["C:/Users/Mega-PC/Desktop/my-project/frontend/src/components/api.js"],"names":["axios","interceptors","request","use","config","accessToken","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","refreshToken","status","_retry","post","then","res","setItem","data","console","log","api","signup","body","login","logout","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,MAAD,IAAY;AACV,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB;;AACA,MAAIF,WAAJ,EAAiB;AACfD,IAAAA,MAAM,CAACI,OAAP,CAAe,cAAf,IAAiCH,WAAjC;AACD;;AACD,SAAOD,MAAP;AACD,CAPH,EAQGK,KAAD,IAAW;AACTC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACD,CAVH,E,CAYA;;AACAT,KAAK,CAACC,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CACGS,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIE,UAAUH,KAAV,EAAiB;AACf,QAAMI,eAAe,GAAGJ,KAAK,CAACL,MAA9B;AACA,MAAIU,YAAY,GAAGR,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;;AACA,MACEO,YAAY,IACZL,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAD1B,IAEA,CAACF,eAAe,CAACG,MAHnB,EAIE;AACAH,IAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB;AACA,WAAOhB,KAAK,CACTiB,IADI,CACE,qBADF,EACwB;AAAEH,MAAAA,YAAY,EAAEA;AAAhB,KADxB,EAEJI,IAFI,CAEEC,GAAD,IAAS;AACb,UAAIA,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,YAAY,CAACc,OAAb,CAAqB,aAArB,EAAoCD,GAAG,CAACE,IAAJ,CAAShB,WAA7C;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,eAAOvB,KAAK,CAACa,eAAD,CAAZ;AACD;AACF,KARI,CAAP;AASD;;AACD,SAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAxBH,E,CA0BA;;AACA,MAAMe,GAAG,GAAG;AACVC,EAAAA,MAAM,EAAGC,IAAD,IAAU;AAChB,WAAO1B,KAAK,CAACiB,IAAN,CAAY,gBAAZ,EAA6BS,IAA7B,CAAP;AACD,GAHS;AAIVC,EAAAA,KAAK,EAAGD,IAAD,IAAU;AACf,WAAO1B,KAAK,CAACiB,IAAN,CAAY,aAAZ,EAA0BS,IAA1B,CAAP;AACD,GANS;AAOVZ,EAAAA,YAAY,EAAGY,IAAD,IAAU;AACtB,WAAO1B,KAAK,CAACiB,IAAN,CAAY,qBAAZ,EAAkCS,IAAlC,CAAP;AACD,GATS;AAUVE,EAAAA,MAAM,EAAGF,IAAD,IAAU;AAChB,WAAO1B,KAAK,CAAC6B,MAAN,CAAc,cAAd,EAA6BH,IAA7B,CAAP;AACD;AAZS,CAAZ","sourcesContent":["import axios from \"axios\";\r\n//request interceptor to add the auth token header to requests\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    if (accessToken) {\r\n      config.headers[\"x-auth-token\"] = accessToken;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    Promise.reject(error);\r\n  }\r\n);\r\n//response interceptor to refresh token on receiving token expired error\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  function (error) {\r\n    const originalRequest = error.config;\r\n    let refreshToken = localStorage.getItem(\"refreshToken\");\r\n    if (\r\n      refreshToken &&\r\n      error.response.status === 401 &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n      return axios\r\n        .post(`auth/token/refresh/`, { refreshToken: refreshToken })\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            localStorage.setItem(\"accessToken\", res.data.accessToken);\r\n            console.log(\"Access token refreshed!\");\r\n            return axios(originalRequest);\r\n          }\r\n        });\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n//functions to make api calls\r\nconst api = {\r\n  signup: (body) => {\r\n    return axios.post(`auth/register/`, body);\r\n  },\r\n  login: (body) => {\r\n    return axios.post(`auth/login/`, body);\r\n  },\r\n  refreshToken: (body) => {\r\n    return axios.post(`auth/token/refresh/`, body);\r\n  },\r\n  logout: (body) => {\r\n    return axios.delete(`auth/logout/`, body);\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}